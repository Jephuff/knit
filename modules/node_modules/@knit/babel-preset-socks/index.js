/* @flow */

const needle = require('@knit/needle');

let presets = [
  require.resolve('babel-preset-react')
]

const buildPresets = [
  [require.resolve('babel-preset-latest'), {
    es2015: { modules: process.env.COMMONJS ? 'commonjs' : false, loose: true },
  }],
]

const testPresets = [
  [require.resolve('babel-preset-env').default, {
    targets: {
      node: parseFloat(process.versions.node),
    },
  }],
]

const relayPlugin = !!(needle.pkg.dependencies || {})['react-relay']
  ? [require.resolve('@knit/babel-plugins-socks/relay')]
  : [];

let plugins = [
  require.resolve('babel-plugin-transform-export-extensions'),
  require.resolve('babel-plugin-add-module-exports'),
];

const devPlugins = [
  // Adds component stack to warning messages
  require.resolve('babel-plugin-transform-react-jsx-source'),
  // Adds __self attribute to JSX which React will use for some warnings
  require.resolve('babel-plugin-transform-react-jsx-self')
]
const testPlugins = [
  require.resolve('babel-plugin-transform-es2015-modules-commonjs'),
];

const env = process.env.BABEL_ENV || process.env.NODE_ENV;

switch (env) {
  case 'development':
    plugins = [
      ...plugins,
      ...relayPlugin,
      ...devPlugins,
      require.resolve('react-hot-loader/babel'),
    ];
    presets = [
      ...presets,
      ...buildPresets,
    ];
    break;
  case 'stage':
  case 'production':
    plugins = [
      ...plugins,
      ...relayPlugin,
    ];
    presets = [
      ...presets,
      ...buildPresets,
    ];
    break;
  case 'test':
    presets = [
      ...presets,
      ...testPresets,
    ];
    switch (process.env.TEST_ENV) {
      case 'single':
        plugins = [
          ...plugins,
          ...testPlugins,
          ...relayPlugin,
        ];
        break;
      case 'watch':
        plugins = [
          ...plugins,
          ...testPlugins,
        ];
        break;
      default:
        break;
    }
    break;
  default:
    break;
}

module.exports = {
  babelrc: false,
  presets,
  plugins,
};
