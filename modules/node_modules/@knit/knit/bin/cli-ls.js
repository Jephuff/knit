#!/usr/bin/env node

const program = require('commander');
const Listr = require('listr');
const chalk = require('chalk');

const knit = require('..');
const log = require('../lib/log');
const errors = require('../lib/errors');

module.exports = (modules) => {
  new Listr([
    ...require('../tasks/modules'),
  ]).run().then(ctx => {
    const ctxms = (ctx || {}).modules || [];
    const ms = modules.length ? modules : ctxms;
    const fMs = ms.filter(m => ctxms.includes(m));
    const nfMs = ms.filter(m => !ctxms.includes(m));

    console.log();
    log.info(chalk.white(`showing dependencies for ${fMs.length} modules`));
    Promise.all(fMs.map(m => knit.findDependencies(m).then(using => {
      console.log();
      console.log(chalk.white(m));
      log.subtree(using.join(' '));
      const missing = knit.findMissingDependencies(using, ctxms);
      if (missing.length > 0) {
        log.missing();
        log.subtree(chalk.white(missing.join(' ')));
      }
    }).catch(errors.catchErrors))).then(() => {
      if (nfMs.length) {
        console.log();
        log.warning(chalk.white('could not find the following modules'));
        log.subtree(nfMs.join(' '));
      }
    });
  }).catch(errors.catchErrors);
};
