#!/usr/bin/env node

const updateNotifier = require('update-notifier');
const program = require('commander');
const readPkgUp = require('read-pkg-up');

const pkg = readPkgUp.sync({ cwd: __dirname }).pkg;

program
  .version(pkg.version);

program
  .command('init')
  .description('create a new monorepo project using knit')
  .action(require('./cli-init'));

program
  .command('play')
  .description('start a dev server')
  .option('-p, --port <port>', 'set server port', parseInt)
  .option('-h, --host <host>', 'set server host')
  .option('-r, --proxy <proxy>', 'set proxy uri')
  .action(require('./cli-play'));

program
  .command('test')
  .description('run tests')
  .usage('-- [jestOptions]')
  .action(require('./cli-test'));

program
  .command('lint')
  .description('run linter')
  .action(require('./cli-lint'));

program
  .command('flow')
  .description('run flow')
  .action(require('./cli-flow'));

program
  .command('relay')
  .description('update relay schema')
  .action(require('./cli-relay'));

program
  .command('ls [modules...]')
  .description('list modules and their dependencies')
  .option('-d, --dependencies', 'show dependencies')
  .action(require('./cli-ls'));

program
  .command('updated')
  .description('list updated modules')
  .action(require('./cli-updated'));

program
  .command('validate')
  .description('validate modules for release')
  .action(require('./cli-validate'));

program
  .command('release <version>')
  .description('release updated modules')
  .option('-f, --force-all', 'release all modules. (will fail if version already released)')
  .action(require('./cli-release'));

program
  .command('publish')
  .description('publish updated modules')
  .option('-f, --force-all', 'publish all modules. (will fail if version already published)')
  .action(require('./cli-publish'));

program
  .parse(process.argv);

const notifier = updateNotifier({
  pkg,
  updateCheckInterval: 1000 * 60 * 60 * 24 * 7, // 1 week
});
notifier.notify();
