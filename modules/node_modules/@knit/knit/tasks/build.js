/* @flow weak */

const path = require('path');
const execa = require('execa');
const Listr = require('listr');
const del = require('del');
const rx = require('@reactivex/rxjs');

const needle = require('@knit/needle');

const build = require('../lib/build');
const utils = require('../lib/utils');

const createBuildTasks = (module) => ({
  title: module,
  task: ctx => rx.Observable.create(observer => {
    const moduleDir = path.join(needle.paths.modules, module);

    observer.next('parsing module package.json');
    const pkg = utils.safeFindPkg(moduleDir) || {};
    if (!pkg.browser) {
      return observer.complete();
    }
    observer.next('removing old builds');
    del(
      [path.join(moduleDir, needle.paths.distStub)]
    ).then(() => {
      observer.next('building for commonjs');
      return build.buildModuleLib(module);
    }).then(() => {
      observer.next('building for es6');
      return build.buildModuleEs6(module);
    }).then(() => {
      observer.next('building for umd');
      return build.buildModuleUmdSource(module);
    }).then(() => {
      observer.next('building for umd minified');
      return build.buildModuleUmdMin(module);
    }).then(() => observer.complete()).catch(err => observer.error(err));
  }),
});

const tasks = [
  {
    title: 'rebuilding updated modules',
    task: ctx => (
      new Listr(ctx.updated.map(createBuildTasks), { concurrent: true })
    ),
  },
];

module.exports = tasks;
