/* @flow weak */

const path = require('path');
const webpack = require('webpack');
const execa = require('execa');
const upperCamelCase = require('uppercamelcase');

const needle = require('@knit/needle');
const knit = require('@knit/knit-core');

const buildModule = (module, output, options) => {
  const moduleDir = path.join(needle.paths.modules, module);
  return execa('babel', [
    moduleDir,
    '-d', path.join(moduleDir, needle.paths.distStub, output),
    '--ignore', [needle.paths.distStub, needle.paths.testsStub].join(','),
  ], options);
};

exports.buildModuleLib = (module) => (
   buildModule(
    module,
    needle.paths.libStub,
    { env: Object.assign({}, process.env, { COMMONJS: true, NODE_ENV: 'production' }) }
  )
);

exports.buildModuleEs6 = (module) => (
   buildModule(
    module,
    needle.paths.es6Stub,
    { env: Object.assign({}, process.env, { NODE_ENV: 'production' }) }
  )
);

const buildModuleUmd = (module, output) => {
  const moduleDir = path.join(needle.paths.modules, module);
  return new Promise((resolve, reject) => webpack(Object.assign({},
    require('@knit/webpack-config-socks-lib'),
    {
      entry: path.join(moduleDir, 'index.js'),
      output: {
        library: upperCamelCase(knit.getModuleName(module)),
        path: path.join(moduleDir, needle.paths.distStub, needle.paths.umdStub, output),
      },
    }
  ), (err) => {
    if (err) reject(err);
    resolve();
  }));
};

exports.buildModuleUmdSource = (module) => {
  process.env.NODE_ENV = 'stage';
  return buildModuleUmd(module, 'index.js');
};

exports.buildModuleUmdMin = (module) => {
  process.env.NODE_ENV = 'production';
  return buildModuleUmd(module, 'index.min.js');
};

exports.buildProjectUmd = (module) => (
  new Promise((resolve, reject) => webpack(Object.assign({},
    require('@knit/webpack-config-socks-app'),
    {
      entry: path.join(needle.paths.modules, module, 'index.js'),
      output: {
        path: path.join(needle.paths.dist, 'js'),
      },
    }
  ), (err) => {
    if (err) reject(err);
    resolve();
  }))
);
