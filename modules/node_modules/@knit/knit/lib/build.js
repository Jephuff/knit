/* @flow weak */

const path = require('path');
const cpy = require('cpy');
const execa = require('execa');
const babel = require('babel-core');
const upperCamelCase = require('uppercamelcase');

const needle = require('@knit/needle');

const utils = require('../lib/utils');

const buildModule = (module, output, options) => {
  const moduleDir = path.join(needle.paths.modules, module);
  return execa('babel', [
    moduleDir,
    '-d', path.join(moduleDir, needle.paths.distStub, output),
    '--presets', '@knit/babel-preset-socks',
    '--ignore', [needle.paths.distStub, needle.paths.testsStub].join(','),
    '--no-babelrc',
  ], options);
};

exports.buildModuleLib = (module) => {
  return buildModule(
    module,
    needle.paths.libStub,
    { env: Object.assign({}, process.env, { COMMONJS: true, NODE_ENV: 'production' }) }
  );
};

exports.buildModuleEs6 = (module) => {
  return buildModule(
    module,
    needle.paths.es6Stub,
    { env: Object.assign({}, process.env, { NODE_ENV: 'production' }) }
  );
};

const buildModuleUmd = (module, output, options) => {
  const moduleDir = path.join(needle.paths.modules, module);
  return execa('webpack', [
    path.join(moduleDir, 'index.js'),
    path.join(moduleDir, needle.paths.distStub, needle.paths.umdStub, output),
    '--config', path.join(needle.paths.modulesStub, '@knit/webpack-config-socks-lib'),
    '--output-library', upperCamelCase(utils.getModuleName(module)),
  ], options);
};

exports.buildModuleUmdSource = (module) => {
  return buildModuleUmd(module, 'index.js', { env: Object.assign({}, process.env, { NODE_ENV: 'stage' }) })
};

exports.buildModuleUmdMin = (module) => {
  return buildModuleUmd(module, 'index.min.js', { env: Object.assign({}, process.env, { NODE_ENV: 'production' }) })
};
