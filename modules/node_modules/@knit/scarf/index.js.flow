/* @flow */

import type { TPkgJson } from '@knit/needle';
import type { TResults } from '@knit/depcheck';

type TNodeError = { code: string };
type TModules = Array<string>
type TFindDependencies = (dir: string) => Promise<TModules>;
type TSafeFindPkg = (d: string) => ?TPkgJson;
type TFindModules = () => TModules
type TFindMissingDependencies = () => {[k:string]: TModules};
type TFindModifiedSince = (m: TModules, tag: string) => TModules
type TMakeDependencyMap = (m: TModules) => {[k:string]: TModules};
type TResolveDependencies = (m: TModules, mp: {[k:string]: TModules}, total: TModules) => TModules;
type TFindUpdatedSince = (tag: string) => TModules;
type TGetDependencyVersion = (d: string, m: TModules, u: TModules) => string;
type TUpdateModulePkg = (m: TPkgJson, ms: TModules, used: TModules, updated: TModules) => TPkgJson;
type TUpdateModulePkgBrowser = (p: TPkgJson) => TPkgJson;
type TCatchErrors = (e: TNodeError) => void;

declare module.exports: {
  findDependencies: TFindDependencies,
  safeFindPkg: TSafeFindPkg,
  findModules: TFindModules,
  findModifiedSince: TFindModifiedSince,
  findUpdatedSince: TFindUpdatedSince,
  resolveDependencies: TResolveDependencies,
  catchErrors: TCatchErrors,
};
