/* @flow weak */

const path = require('path');

// type TExtractLoaders = (i: TLoader) => Array<string>;
const extractLoaders = (item) => {
  let loaders = [];
  if (item.loader) {
    loaders = loaders.concat(item.loader.split('!'));
  } else if (item.loaders) {
    loaders = loaders.concat(item.loaders);
  }

  return loaders;
};

// type TStripQueryParameter = (l: string) => string;
const stripQueryParameter = (loader) => {
  const index = loader.indexOf('?');
  return index === -1 ? loader : loader.substring(0, index);
};

// type TNormalizeLoader = (l: string) => string;
const normalizeLoader = (loader) => (
  `${loader.split('-')[0]}-loader`
);

// type TGetLoaders = (d: Array<string>, l: ?TLoader) => Array<string>
function getLoaders(deps, loaders) {
  return (loaders || [])
    .map(extractLoaders)
    .reduce((acc, x) => acc.concat(x), [])
    .map(stripQueryParameter)
    .map(normalizeLoader)
    .filter(Boolean)
    .reduce((acc, x) => (acc.includes(x) ? acc : acc.concat(x)), []);
}

module.exports = (content, filename, deps, rootDir) => {
  if (
    path.basename(rootDir).includes('webpack-config')
    && path.extname(filename) === '.js'
  ) {
    // $FlowIgnore
    const webpackConfig = require(filename); // eslint-disable-line import/no-dynamic-require
    const module = webpackConfig.module || {};

    const loaders = getLoaders(deps, module.loaders);
    const preLoaders = getLoaders(deps, module.preLoaders);
    const postLoaders = getLoaders(deps, module.postLoaders);

    return loaders.concat(preLoaders).concat(postLoaders);
  }

  return [];
};
