const knit = require('..');

describe('resolveDependencies', () => {
  const rd = knit.resolveCascadingUpdates;
  const modules = ['mod1', 'mod2', 'mod3', 'mod4']

  test('no modified modules', () => {
    expect(rd(modules, {}, [])).toEqual([]);
  });
  test('modified modules with no mapping', () => {
    const modified = ['mod1', 'mod2'];
    expect(rd(modules, {}, modified)).toEqual(modified);
  });
  test('one level of dependencies', () => {
    const modified = ['mod1'];
    const mapping = {
      'mod1': [],
      'mod2': ['mod1'],
      'mod3': ['mod1'],
    };
    const resolved = ['mod1', 'mod2', 'mod3'];
    expect(rd(modules, mapping, modified)).toEqual(resolved);
  });
  test('one level of multiple dependencies', () => {
    const modified = ['mod0'];
    const mapping = {
      'mod0': [],
      'mod1': ['mod0'],
      'mod2': ['mod0', 'mod1'],
      'mod3': ['mod0', 'mod1'],
      'mod4': ['mod0', 'mod2', 'mod3'],
    };
    const resolved = ['mod0', 'mod1', 'mod2', 'mod3', 'mod4'];
    expect(rd(modules, mapping, modified)).toEqual(resolved);
  });
  test('multiple modified modules', () => {
    const modified = ['mod1', 'mod2'];
    const mapping = {
      'mod0': [],
      'mod1': ['mod0'],
      'mod2': ['mod0', 'mod1'],
      'mod3': ['mod0'],
      'mod4': ['mod2', 'mod3'],
    };
    const resolved = ['mod1', 'mod2', 'mod4'];
    expect(rd(modules, mapping, modified)).toEqual(resolved);
  });
  test('multiple level dependencies', () => {
    const modified = ['mod0'];
    const mapping = {
      'mod0': [],
      'mod1': ['mod0'],
      'mod2': ['mod1'],
      'mod3': ['mod2'],
      'mod4': ['mod3'],
      'mod5': []
    };
    const resolved = ['mod0', 'mod1', 'mod2', 'mod3', 'mod4'];
    expect(rd(modules, mapping, modified)).toEqual(resolved);
  });
  test('cyclic dependencies', () => {
    const modified = ['mod0'];
    const mapping = {
      'mod0': ['mod1'],
      'mod1': ['mod0']
    };
    const resolved = ['mod0', 'mod1'];
    expect(rd(modules, mapping, modified)).toEqual(resolved);
  });
});
